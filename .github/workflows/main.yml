name: CI/CD

on:
  push:
    branches:
      - main
      - master

env:
  SERVER_USERNAME: ${{ vars.SERVER_USERNAME }}
  SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
  IMAGE_TAG: ${{ github.run_number }}
  REGISTRY: registry.cn-zhangjiakou.aliyuncs.com/baiyigali/monkitect_graph
  REGISTRY_USERNAME: ${{ vars.REGISTRY_USERNAME }}
  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
  DEPLOY_FOLDER: "/home/baiyigali/workspace/monkitect_graph"

jobs:
  build:
    name: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - name: Login to ACR
        run: docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD $REGISTRY

      - name: Build image
        run: docker build -t $REGISTRY:$IMAGE_TAG . --file docker/Dockerfile

      - name: Push image
        run: docker push $REGISTRY:$IMAGE_TAG

  deploy_int:
    needs: [ build ]
    name: deploy_int
    runs-on: ubuntu-latest
    env:
      SERVER_IP: ${{ vars.SERVER_IP }}

    steps:
      - uses: actions/checkout@v1

      - uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '<<'
          tokenSuffix: '>>'
          files: '["docker-compose.yml"]'

      - name: Bash - Show docker-compose.yml
        run: cat docker-compose.yml

      - name: SCP file
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          source: "docker-compose.yml,nginx"
          target: ${{ env.DEPLOY_FOLDER }}
          overwrite: true

      - name: SSH into server and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            cd /home/baiyigali/workspace/monkitect_graph
            docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD $REGISTRY
            docker compose pull
            docker compose up -d
  test_int:
    needs: [ deploy_int ]
    runs-on: ubuntu-latest
    steps:
      - name: Health check
        run: |
          sleep 10  # Wait for the server to start
          curl --fail -w "%{http_code}" -sS -o /dev/stderr https://graph-int.monkitect.com/healthy/ || exit 1

  approve_deploy_prod:
    needs: [ test_int ]
    name: approve_deploy_prod
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - uses: trstringer/manual-approval@v1.9.0
        timeout-minutes: 2
        with:
          secret: ${{ github.TOKEN }}
          approvers: baiyigali
          minimum-approvals: 1
          issue-title: "${{ github.run_number }} Deploying to approve_deploy_prod"
          issue-body: "Please approve or deny the deployment"
          exclude-workflow-initiator-as-approver: false
          additional-approved-words: ''
          additional-denied-words: ''

  deploy_prod:
    needs: [ approve_deploy_prod ]
    name: deploy_prod
    runs-on: ubuntu-latest
    env:
      SERVER_IP: ${{ vars.SERVER_IP_PROD }}

    steps:
      - uses: actions/checkout@v1

      - uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '<<'
          tokenSuffix: '>>'
          files: '["docker-compose.yml"]'

      - name: Bash - Show docker-compose.yml
        run: cat docker-compose.yml

      - name: SCP file
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_KEY }}
          port: 22
          source: "docker-compose.yml,nginx"
          target: ${{ env.DEPLOY_FOLDER }}
          overwrite: true

      - name: SSH into server and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_KEY }}
          script: |
            cd /home/baiyigali/workspace/monkitect_graph
            docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD $REGISTRY
            docker compose pull
            docker compose up -d
  test_prod:
    needs: [ deploy_prod ]
    runs-on: ubuntu-latest
    steps:
      - name: Health check
        run: |
          sleep 10  # Wait for the server to start
          curl --fail -w "%{http_code}" -sS -o /dev/stderr https://graph.monkitect.com/healthy/ || exit 1
